<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<modelVersion>4.0.0</modelVersion>
	<groupId>io.github.models-lab.efinder</groupId>
	<artifactId>efinder-parent</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>EFinder</name>
	<url>https://github.com/jesusc/efinder/</url>
	<description>
		EFinder is a model finder for EMF
	</description>

	<licenses>
		<license>
			<name>Eclipse Public License 2.0</name>
			<url>https://www.eclipse.org/legal/epl-2.0/</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>jesusc</id>
			<name>Jesús Sánchez Cuadrado</name>
			<url>https://sanchezcuadrado.es</url>
			<roles>
				<role>Lead</role>
			</roles>
		</developer>
	</developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<swt.version>3.114.0</swt.version>
	</properties>

	<modules>
		<module>bundles/efinder.core/pom-plain.xml</module>
		<module>bundles/efinder.usemv/pom-plain.xml</module>
		<module>bundles/efinder.emfocl/pom-plain.xml</module>
	</modules>

	<!--
      Eclipse POMs normally use version ranges for their dependencies, to mimic
      the Require-Bundle support for version ranges, unlike most Maven artifacts
      which depend on specific versions for reproducibility.

In order to have a reproducible build, we need to use dependencyManagement
so we decide on a specific version within those ranges, and we keep to the
same version of EMF / other bits always.
  -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.eclipse.platform</groupId>
				<artifactId>org.eclipse.core.runtime</artifactId>
				<version>3.17.0</version>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jdt</groupId>
				<artifactId>org.eclipse.jdt.annotation</artifactId>
				<version>2.2.700</version>
			</dependency>

			<dependency>
				<groupId>org.eclipse.emf</groupId>
				<artifactId>org.eclipse.emf.ecore</artifactId>
				<version>2.23.0</version>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>27.1-jre</version>
				<exclusions>
					<exclusion>
						<groupId>com.google.guava</groupId>
						<artifactId>failureaccess</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.code.findbugs</groupId>
						<artifactId>jsr305</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.checkerframework</groupId>
						<artifactId>*</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.errorprone</groupId>
						<artifactId>*</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.j2objc</groupId>
						<artifactId>*</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>*</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<sourceDirectory>src</sourceDirectory>
		<directory>target-plain</directory>
		<outputDirectory>target-plain/classes</outputDirectory>
		<testOutputDirectory>target-plain/test-classes</testOutputDirectory>


		<plugins>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-maven-plugin</artifactId>
				<extensions>false</extensions>
			</plugin>

			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<compilerId>eclipse</compilerId>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.plexus</groupId>
						<artifactId>plexus-compiler-eclipse</artifactId>
						<version>2.8.6</version>
					</dependency>
				</dependencies>
			</plugin>
			-->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.4.0</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${basedir}/src-gen</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
						
			<!--						
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<additionalOptions>
								<additionalOption>-Xdoclint:none</additionalOption>
							</additionalOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>
			-->
		</plugins>
	</build>

	<pluginRepositories>
		<pluginRepository>
			<id>cbi</id>
			<url>https://repo.eclipse.org/content/repositories/cbi-releases/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<uniqueVersion>false</uniqueVersion>
			<id>ossrh</id>
			<name>OSSRH Release Staging Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
		</repository>
		<snapshotRepository>
			<uniqueVersion>false</uniqueVersion>
			<id>ossrh</id>
			<name>OSSRH Snapshots Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<profiles>
		<!-- NOTE: these two profiles have to be in this exact order, so we
		first
         sign the JAR with a certificate, and then we GPG sign the resulting
         JAR. The opposite order won't work. -->
		<profile>
			<id>eclipse-sign</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<!--
					https://www.eclipse.org/cbi/sitedocs/eclipse-jarsigner-plugin/plugin-info.html -->
					<plugin>
						<groupId>org.eclipse.cbi.maven.plugins</groupId>
						<artifactId>eclipse-jarsigner-plugin</artifactId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<id>sign</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>ossrh</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.8</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org</nexusUrl>
							<!-- We want to check staged releases manually on
                   Sonatype OSSRH before we propagate to Central. -->
							<autoReleaseAfterClose>false</autoReleaseAfterClose>
						</configuration>
					</plugin>
					<!-- Anything that goes to Central must be GPG signed -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>
